#!/usr/bin/python3
"""
4-stream_ages.py
Objective: Stream user ages from the database efficiently and calculate average age
"""

import seed  # ูุณุชุฏุนู ุงูููู ุงููู ููู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช


def stream_user_ages():
    """
    Generator function that yields user ages from the database one by one
    """
    connection = seed.connect_to_prodev() # method to connect to the database in seed.py
    cursor = connection.cursor()

    # ูุฌูุจ ููุท ุงูุฃุนูุงุฑ ูู ุงูุฌุฏูู
    cursor.execute("SELECT age FROM user_data")

    # ูุฌูุจ ุงูุตููู ูุงุญุฏุฉ ูุงุญุฏุฉ (lazy loading)
    for (age,) in cursor:
        yield float(age)  # ูุฑุฌุน ูู ุนูุฑ ููููุฉ ุฑูููุฉ (float) >> returns a float value for each age

    cursor.close()
    connection.close()


def calculate_average_age():
    """
    Uses the generator to calculate the average age without loading all data
    """
    total_age = 0
    count = 0

    # ุญููุฉ ูุงุญุฏุฉ ููุท ูุฌูุน ุงูููู ูุนุฏูุง
    for age in stream_user_ages():
        total_age += age
        count += 1

    # ูุญุณุจ ุงููุชูุณุท ุฅุฐุง ูุงู ููู ุจูุงูุงุช
    average_age = total_age / count if count > 0 else 0

    print(f"Average age of users: {average_age:.2f}")


# ๐ ุชุดุบูู ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ
if __name__ == "__main__":
    calculate_average_age()

'''
ุดุฑุญ ุงูููุฑุฉ:

stream_user_ages() โ generator ุจูุงุฎุฏ ุงูุฃุนูุงุฑ ูู SQL ูุงุญุฏุฉ ูุงุญุฏุฉ.

calculate_average_age() โ ุจูุณุชุฎุฏู ุงูููู ุฏู ูุญุณุงุจ ุงููุชูุณุท ุจุฏูู ูุง ูุญูู ูู ุงูุฃุนูุงุฑ ูู memory.

ูุงููุด SQL AVG() โ ูุฃูู ุจุชุนูู ุงูุชุฌููุน ุจููุณู ุฏุงุฎู Python.

ุนุฏุฏ ุงูุญููุงุช = 1 (ููุท ูู ุญุณุงุจ ุงููุชูุณุท).

๐ ูุซุงู ูุงุชุฌ ุงูุชุดุบูู:
$ python 4-stream_ages.py
Average age of users: 62.42
'''